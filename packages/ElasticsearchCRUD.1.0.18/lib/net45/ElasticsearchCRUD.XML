<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ElasticsearchCRUD</name>
    </assembly>
    <members>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchCoreTypes.Similarity">
            <summary>
            "similarity":"BM25"
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBinary.IndexName">
            <summary>
            index_name
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBinary.Compress">
            <summary>
            compress
            Set to true to compress the stored binary value.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBinary.Store">
            <summary>
            store
            Set to true to actually store the field in the index, false to not store it. Defaults to false (note, the JSON document itself is stored, and it can be retrieved from it).
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBinary.DocValues">
            <summary>
            doc_values
            Set to true to store field values in a column-stride fashion. Automatically set to true when the fielddata format is doc_values.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBinary.CompressThreshold">
            <summary>
            //compress_threshold
            Compression will only be applied to stored binary fields that are greater than this size. Defaults to -1 
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBoolean.IndexName">
            <summary>
            index_name
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBoolean.Index">
            <summary>
            index
            Set to no if the value should not be indexed. Setting to no disables include_in_all. If set to no the field should be either stored in _source, have include_in_all enabled, or store be set to true for this to be useful.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBoolean.Store">
            <summary>
            store
            Set to true to actually store the field in the index, false to not store it. Defaults to false (note, the JSON document itself is stored, and it can be retrieved from it).
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBoolean.DocValues">
            <summary>
            doc_values
            Set to true to store field values in a column-stride fashion. Automatically set to true when the fielddata format is doc_values.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBoolean.Boost">
            <summary>
            boost
            The boost value. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchBoolean.NullValue">
            <summary>
            null_value
            When there is a (JSON) null value for the field, use the null_value as the field value. Defaults to not adding the field at all.
            </summary>
        </member>
        <member name="T:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber">
            <summary>
            type The type of the number. Can be float, double, integer, long, short, byte. Required.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber.IndexName">
            <summary>
            index_name
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber.Store">
            <summary>
            store
            Set to true to actually store the field in the index, false to not store it. Defaults to false (note, the JSON document itself is stored, and it can be retrieved from it).
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber.Index">
            <summary>
            index
            Set to no if the value should not be indexed. Setting to no disables include_in_all. If set to no the field should be either stored in _source, have include_in_all enabled, or store be set to true for this to be useful.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber.DocValues">
            <summary>
            doc_values
            Set to true to store field values in a column-stride fashion. Automatically set to true when the fielddata format is doc_values.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber.Boost">
            <summary>
            boost
            The boost value. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber.NullValue">
            <summary>
            null_value
            When there is a (JSON) null value for the field, use the null_value as the field value. Defaults to not adding the field at all.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber.IncludeInAll">
            <summary>
            include_in_all
            Should the field be included in the _all field (if enabled). If index is set to no this defaults to false, otherwise, defaults to true or to the parent object type setting.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber.PrecisionStep">
            <summary>
            precision_step
            The precision step (influences the number of terms generated for each number value). Defaults to 16 for long, double, 8 for short, integer, float, and 2147483647 for byte.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber.IgnoreMalformed">
            <summary>
            ignore_malformed
            Ignored a malformed number. Defaults to false.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchNumber.Coerce">
            <summary>
            coerce
            Try convert strings to numbers and truncate fractions for integers. Defaults to true.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchDate.Format">
            <summary>
            The date format. Defaults to dateOptionalTime.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchDate.IndexName">
            <summary>
            index_name
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchDate.Store">
            <summary>
            store
            Set to true to actually store the field in the index, false to not store it. Defaults to false (note, the JSON document itself is stored, and it can be retrieved from it).
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchDate.DocValues">
            <summary>
            doc_values
            Set to true to store field values in a column-stride fashion. Automatically set to true when the fielddata format is doc_values.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchDate.Boost">
            <summary>
            boost
            The boost value. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchDate.NullValue">
            <summary>
            null_value
            When there is a (JSON) null value for the field, use the null_value as the field value. Defaults to not adding the field at all.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchDate.IncludeInAll">
            <summary>
            include_in_all
            Should the field be included in the _all field (if enabled). If index is set to no this defaults to false, otherwise, defaults to true or to the parent object type setting.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchDate.PrecisionStep">
            <summary>
            precision_step
            The precision step (influences the number of terms generated for each number value). Defaults to 16.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchDate.IgnoreMalformed">
            <summary>
            ignore_malformed
            Ignored a malformed number. Defaults to false.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.IndexName">
            <summary>
            index_name
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.Store">
            <summary>
            store
            Set to true to actually store the field in the index, false to not store it. Defaults to false (note, the JSON document itself is stored, and it can be retrieved from it).
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.Index">
            <summary>
            index
            Set to analyzed for the field to be indexed and searchable after being broken down into token using an analyzer. not_analyzed means that its still searchable, but does not go through any analysis process or broken down into tokens. no means that it won’t be searchable at all (as an individual field; it may still be included in _all). Setting to no disables include_in_all. Defaults to analyzed.	
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.DocValues">
            <summary>
            doc_values
            Set to true to store field values in a column-stride fashion. Automatically set to true when the fielddata format is doc_values.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.TermVector">
            <summary>
            term_vector
            Possible values are no, yes, with_offsets, with_positions, with_positions_offsets. Defaults to no.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.Boost">
            <summary>
            boost
            The boost value. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.NullValue">
            <summary>
            null_value
            When there is a (JSON) null value for the field, use the null_value as the field value. Defaults to not adding the field at all.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.NormsEnabled">
            <summary>
            norms: {enabled: value}
            Boolean value if norms should be enabled or not. Defaults to true for analyzed fields, and to false for not_analyzed fields. See the section about norms.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.NormsLoading">
            <summary>
            norms: {loading: value}
            Describes how norms should be loaded, possible values are eager and lazy (default). It is possible to change the default value to eager for all fields by configuring the index setting index.norms.loading to eager.		
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.IndexOptions">
            <summary>
            index_options
            Allows to set the indexing options, possible values are docs (only doc numbers are indexed), freqs (doc numbers and term frequencies), and positions (doc numbers, term frequencies and positions). Defaults to positions for analyzed fields, and to docs for not_analyzed fields. It is also possible to set it to offsets (doc numbers, term frequencies, positions and offsets).	
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.Analyzer">
            <summary>
            analyzer
            The analyzer used to analyze the text contents when analyzed during indexing and when searching using a query string. Defaults to the globally configured analyzer.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.IndexAnalyzer">
            <summary>
            index_analyzer
            The analyzer used to analyze the text contents when analyzed during indexing.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.SearchAnalyzer">
            <summary>
            search_analyzer
            The analyzer used to analyze the field when part of a query string. Can be updated on an existing field.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.IncludeInAll">
            <summary>
            include_in_all
            Should the field be included in the _all field (if enabled). If index is set to no this defaults to false, otherwise, defaults to true or to the parent object type setting.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.IgnoreAbove">
            <summary>
            ignore_above
            The analyzer will ignore strings larger than this size. Useful for generic not_analyzed fields that should ignore long text.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.ElasticsearchString.PositionOffsetGap">
            <summary>
            position_offset_gap
            Position increment gap between field instances with the same field name. Defaults to 0.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ContextAddDeleteUpdate.CoreTypeAttributes.Fields.FieldClass">
            <summary>
            You can define all the Elasticsearch properties here
            </summary>
        </member>
        <member name="M:ElasticsearchCRUD.ContextAddDeleteUpdate.IndexMappings.CreatePropertyMappingForEntityForParentDocument(ElasticsearchCRUD.EntityContextInfo,ElasticsearchCRUD.ElasticsearchMapping,ElasticsearchCRUD.ContextAddDeleteUpdate.IndexModel.IndexDefinition)">
            <summary>
            Create a new index for the parent document
            </summary>
            <param name="entityInfo"></param>
            <param name="elasticsearchMapping"></param>
        </member>
        <member name="M:ElasticsearchCRUD.ContextAddDeleteUpdate.IndexMappings.CreatePropertyMappingForChildDocument(ElasticsearchCRUD.EntityContextInfo,ElasticsearchCRUD.ElasticsearchMapping,ElasticsearchCRUD.EntityContextInfo)">
            <summary>
            Create a new mapping for the child type in the parent document index
            </summary>
            <param name="entityInfo"></param>
            <param name="elasticsearchMapping"></param>
            <param name="item"></param>
        </member>
        <member name="M:ElasticsearchCRUD.ContextAddDeleteUpdate.IndexMappings.CreateForceRoutingMappingForDocument(ElasticsearchCRUD.ElasticsearchCrudJsonWriter)">
            <summary>
            "_routing": {
            "required": true
            },
            </summary>
            <param name="elasticsearchCrudJsonWriter"></param>
        </member>
        <member name="M:ElasticsearchCRUD.ContextAddDeleteUpdate.IndexMappings.CreateIndexSettings(ElasticsearchCRUD.ElasticsearchCrudJsonWriter,System.Int32,System.Int32)">
            "settings" : {
            "number_of_shards" : 1
            },
        </member>
        <member name="F:ElasticsearchCRUD.ElasticsearchCrudReindex`2.ScanAndScrollConfiguration">
            <summary>
            Scan ans scroll settings for the reindex. You should keep this small, otherwise the response request will be too larger.
            Default is 5 seconds with a size of 500 documents pro shard.
            </summary>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchCrudReindex`2.#ctor(ElasticsearchCRUD.Utils.IndexTypeDescription,ElasticsearchCRUD.Utils.IndexTypeDescription,System.String)">
            <summary>
            Reindex constructor. The class reuires a index and a type for the old index and also the new index. The old index can then be converteds or reindexed to the new index.
            </summary>
            <param name="oldIndexTypeDescription">index and index type parameters for the old index</param>
            <param name="newIndexTypeDescription">index and index type parameters for the new index</param>
            <param name="connectionString">Elasticsearch connection string</param>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchCrudReindex`2.SwitchAliasfromOldToNewIndex(System.String)">
            <summary>
            Resets the alias from the old index to the new index. Assumes that a alias is used for the old indeex. This way, reindex can be done live.
            </summary>
            <param name="alias">alias string used for the index.</param>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchCrudReindex`2.Reindex(System.String,System.Func{`0,System.Object},System.Func{`0,`1},System.Func{`0,ElasticsearchCRUD.ContextAddDeleteUpdate.RoutingDefinition})">
            <summary>
            This method is used to reindex one index to a new index using a query, and two Functions.
            </summary>
            <param name="jsonContent">Json content for the search query</param>
            <param name="getKeyMethod">Func is require to define the _id required for the new index</param>
            <param name="convertMethod">Func used to map the old index to the new old, whatever your required mapping/conversion logic is</param>
            <param name="getRoutingDefinition">Function to get the RoutingDefinition of the document</param>
        </member>
        <member name="P:ElasticsearchCRUD.ElasticsearchCrudReindex`2.TraceProvider">
            <summary>
            TraceProvider if logging or tracing is used
            </summary>
        </member>
        <member name="T:ElasticsearchCRUD.ElasticsearchSerializerConfiguration">
            <summary>
            Configuration class used for the context settings.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ElasticsearchSerializerConfiguration.ElasticsearchMappingResolver">
            <summary>
            Mapping resolver used to get set each mapping configuration for a type. A type can only have one mapping pro context.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ElasticsearchSerializerConfiguration.SaveChildObjectsAsWellAsParent">
            <summary>
            Saves all child objects as well as the parent if set. 
            The child objects will be saved as nested or as separate documents depending on ProcessChildDocumentsAsSeparateChildIndex
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ElasticsearchSerializerConfiguration.ProcessChildDocumentsAsSeparateChildIndex">
            <summary>
            Context will save child objects as separate types in the same index if set. Otherwise child itemas are saved as nested objects.
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ElasticsearchSerializerConfiguration.UserDefinedRouting">
            <summary>
            This defines idf you want to define your own routing. You should only do this if you know what you are doing
            or you have grandchild documents in a parent child grandchild relationship. This makes certain that the grandchildren are
            defined on the same shard. It also cuses that gets, etc required the routing value of the parent route document...
            </summary>
        </member>
        <member name="T:ElasticsearchCRUD.ElasticsearchMapping">
            <summary>
            Default mapping for your Entity. You can implement this clas to implement your specific mapping if required
            Everything is lowercase and the index is pluralized
            </summary>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchMapping.MapEntityValues(ElasticsearchCRUD.EntityContextInfo,ElasticsearchCRUD.ElasticsearchCrudJsonWriter,System.Boolean,System.Boolean)">
            <summary>
            Ovveride this if your default mapping needs to be changed.
            default type is lowercase for properties, indes pluralized and type to lower
            </summary>
            <param name="entityInfo">Information about the entity</param>
            <param name="elasticsearchCrudJsonWriter">Serializer with added tracing</param>
            <param name="beginMappingTree">begin new mapping tree</param>
            <param name="createPropertyMappings">This tells the serializer to create a Json property mapping from the entity and not the document itself</param>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchMapping.GetDocumentType(System.Type)">
            <summary>
            Override this if you require a special type definitoin for your document type.
            </summary>
            <param name="type"></param>
            <returns>The type used in Elasticsearch for this type</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchMapping.GetIndexForType(System.Type)">
            <summary>
            Overide this if you need to define the index for your document. 
            Required if your using a child document type.
            Default: pluralize the default type
            </summary>
            <param name="type">Type of class used</param>
            <returns>The index used in Elasticsearch for this type</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchMapping.GetElasticsearchType(System.Type)">
            <summary>
            bool System.Boolean
            byte System.Byte
            sbyte System.SByte 
            char System.Char
            decimal System.Decimal => string
            double System.Double
            float System.Single
            int System.Int32
            uint System.UInt32
            long System.Int64
            ulong System.UInt64
            short System.Int16
            ushort System.UInt16
            string System.String 
            </summary>
            <param name="propertyType"></param>
            <returns>
            string,  boolean, and null.
            float, double, byte, short, integer, and long
            date
            binary
            </returns>
        </member>
        <member name="T:ElasticsearchCRUD.ElasticsearchContext">
            <summary>
            Context for crud operations. 
            </summary>
        </member>
        <member name="F:ElasticsearchCRUD.ElasticsearchContext._traceProvider">
            <summary>
            TraceProvider for all logs, trace etc. This can be replaced with any TraceProvider implementation.
            </summary>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.#ctor(System.String,ElasticsearchCRUD.ElasticsearchSerializerConfiguration)">
            <summary>
            ctor
            </summary>
            <param name="connectionString">Connection string which is used as ther base URL for the HttpClient</param>
            <param name="elasticsearchSerializerConfiguration">Configuration class for the context. The default settings can be oset here. This 
            class contains an IElasticsearchMappingResolver</param>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.#ctor(System.String,ElasticsearchCRUD.IElasticsearchMappingResolver)">
            <summary>
            ctor
            </summary>
            <param name="connectionString">Connection string which is used as ther base URL for the HttpClient</param>
            <param name="elasticsearchMappingResolver">Resolver used for getting the index and type of a document type. The default 
            ElasticsearchSerializerConfiguration is used in this ctor.</param>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AddUpdateDocument(System.Object,System.Object,ElasticsearchCRUD.ContextAddDeleteUpdate.RoutingDefinition)">
            <summary>
            Adds a document to the pending changes list. Nor HTTP request is sent with this method. If the save changes is not called, the
            document is not added or updated in the search engine
            </summary>
            <param name="document">Document to be added or updated</param>
            <param name="id">document id</param>
            <param name="routingDefinition">parent id of the document. This is only used if the ElasticsearchSerializerConfiguration.ProcessChildDocumentsAsSeparateChildIndex
            property is set to true. The document is then saved with the parent routing. It will also be saved even if the parent does not exist.</param>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.DeleteDocument``1(System.Object)">
            <summary>
            Adds a document to the pending changes list to be deletedd. Nor HTTP request is sent with this method. If the save changes is not called, the
            document is not added or updated in the search engine
            </summary>
            <typeparam name="T">This type is used to get the index and type of the document</typeparam>
            <param name="id">id of the document which will be deleted.</param>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.SaveChangesAndInitMappings">
            <summary>
            Saves all the changes in the pending list of changes, add, update and delete. It also creates mappings and indexes
            if the child documents are saved as separate index types. ElasticsearchSerializerConfiguration.ProcessChildDocumentsAsSeparateChildIndex= true
            </summary>
            <returns>Returns HTTP response information</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.SaveChanges">
            <summary>
            Saves all the changes in the pending list of changes, add, update and delete. No mappings are created here for child document types.
            </summary>
            <returns>Returns HTTP response information</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.SaveChangesAsync">
            <summary>
            async Saves all the changes in the pending list of changes, add, update and delete. No mappings are created here for child document types.
            </summary>
            <returns>Returns HTTP response information</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.GetDocument``1(System.Object,ElasticsearchCRUD.ContextAddDeleteUpdate.RoutingDefinition)">
            <summary>
            Gets a document by id. Elasticsearch GET API
            </summary>
            <typeparam name="T">type used for the document index and type definition</typeparam>
            <param name="documentId">document id</param>
            <param name="routingDefinition">Parent Id of the document if document is a child document Id the Id is incorrect, you may still recieve the child document (parentId might be
            saved to the same shard.) If the child is a child document and no parent id is set, no docuemnt will be found.</param>
            <returns>Document type T</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.SearchById``1(System.Object)">
            <summary>
            Uses Elasticsearch search API to get the document per id
            </summary>
            <typeparam name="T">type T used to get index anf the type of the document.</typeparam>
            <param name="documentId"></param>
            <returns>Returns the document of type T</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.Search``1(System.String,System.String,ElasticsearchCRUD.ContextSearch.ScanAndScrollConfiguration)">
            <summary>
            Search API method to search for anything. any json string which matches the Elasticsearch Search API can be used. Only single index and type search
            </summary>
            <typeparam name="T">Type T used for the index and tpye used in the search</typeparam>
            <param name="searchJsonParameters">JSON string which matches the Elasticsearch Search API</param>
            <param name="scrollId">If this search is part of a scan and scroll, you can add the scrollId to open the context</param>
            <param name="scanAndScrollConfiguration">Required scroll configuration</param>
            <returns>A collection of documents of type T</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.SearchAsync``1(System.String,System.String,ElasticsearchCRUD.ContextSearch.ScanAndScrollConfiguration)">
            <summary>
            async Search API method to search for anything. any json string which matches the Elasticsearch Search API can be used. Only single index and type search
            </summary>
            <typeparam name="T">Type T used for the index and tpye used in the search</typeparam>
            <param name="searchJsonParameters">JSON string which matches the Elasticsearch Search API</param>
            /// <param name="scrollId">If this search is part of a scan and scroll, you can add the scrollId to open the context</param>
            <param name="scanAndScrollConfiguration">Required scroll configuration</param>
            <returns>A collection of documents of type T in a Task</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.SearchExists``1(System.String)">
            <summary>
            executes a post request to checks if at least one document exists for the search query.
            </summary>
            <typeparam name="T">Type used to define the type and index in elsticsearch</typeparam>
            <param name="searchJsonParameters">json query for elasticsearch</param>
            <returns>true if one document exists for the search query</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.SearchExistsAsync``1(System.String)">
            <summary>
            async executes a post request to checks if at least one document exists for the search query.
            </summary>
            <typeparam name="T">Type used to define the type and index in elsticsearch</typeparam>
            <param name="searchJsonParameters">json query for elasticsearch</param>
            <returns>true if one document exists for the search query</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.SearchCreateScanAndScroll``1(System.String,ElasticsearchCRUD.ContextSearch.ScanAndScrollConfiguration)">
            <summary>
            Creates a new scan and scroll search. Takes the query json content and returns a _scroll_id in the payload for the following searches.
            If your doing a live reindexing, you should use a timestamp in the json content query.
            </summary>
            <typeparam name="T">index and type formt search scan and scroll</typeparam>
            <param name="jsonContent">query which will be saved.</param>
            <param name="scanAndScrollConfiguration">The scan and scroll configuration, for example scroll in time units</param>
            <returns>Returns the _scroll_id in the Payload property and the total number of hits.</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.SearchCreateScanAndScrollAsync``1(System.String,ElasticsearchCRUD.ContextSearch.ScanAndScrollConfiguration)">
            <summary>
            Async Creates a new scan and scroll search. Takes the query json content and returns a _scroll_id in the payload for the following searches.
            If your doing a live reindexing, you should use a timestamp in the json content query.
            </summary>
            <typeparam name="T">index and type formt search scan and scroll</typeparam>
            <param name="jsonContent">query which will be saved.</param>
            <param name="scanAndScrollConfiguration">The scan and scroll configuration, for example scroll in time units</param>
            <returns>Returns the _scroll_id in the Payload property and the total number of hits.</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.Count``1(System.String)">
            <summary>
            ElasticsearchContextCount to amount of hits for a index, type and query.
            </summary>
            <typeparam name="T">Type to find</typeparam>
            <param name="jsonContent">json query data, returns all in emtpy</param>
            <returns>Result amount of document found</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.CountAsync``1(System.String)">
            <summary>
            ElasticsearchContextCount to amount of hits for a index, type and query.
            </summary>
            <typeparam name="T">Type to find</typeparam>
            <param name="jsonContent">json query data, returns all in emtpy</param>
            <returns>Result amount of document found in a result details task</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.SearchByIdAsync``1(System.Object)">
            <summary>
            async Uses Elasticsearch search API to get the document per id
            </summary>
            <typeparam name="T">type T used to get index anf the type of the document.</typeparam>
            <param name="documentId"></param>
            <returns>Returns the document of type T in a Task with result details</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.DeleteByQueryAsync``1(System.String)">
            <summary>
            Async Deletes all documents found using the query in the body.
            </summary>
            <typeparam name="T">Type used to define the index and the type in Elasticsearch</typeparam>
            <param name="jsonContent">json string using directly in Elasticsearch API. </param>
            <returns>Returns true if ok</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.DeleteByQuery``1(System.String)">
            <summary>
            Deletes all documents found using the query in the body.
            </summary>
            <typeparam name="T">Type used to define the index and the type in Elasticsearch</typeparam>
            <param name="jsonContent">json string using directly in Elasticsearch API. </param>
            <returns>Returns true if ok</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.GetDocumentAsync``1(System.Object,ElasticsearchCRUD.ContextAddDeleteUpdate.RoutingDefinition)">
            <summary>
            Gets a document by id. Elasticsearch GET API
            </summary>
            <typeparam name="T">type used for the document index and type definition</typeparam>
            <param name="documentId">document id</param>
            <param name="routingDefinition">Parent Id of the document if document is a child document Id the Id is incorrect, you may still recieve the child document (parentId might be
            saved to the same shard.) If the child is a child document and no parent id is set, no docuemnt will be found.</param>
            <returns>Document type T in a Task with result details</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.DocumentExists``1(System.Object,ElasticsearchCRUD.ContextAddDeleteUpdate.RoutingDefinition)">
            <summary>
            Checks if a document exists with a head request
            </summary>
            <typeparam name="T">Type of document to find</typeparam>
            <param name="documentId">Id of the document</param>
            <param name="routingDefinition">parent Id, required if hte docuemtnis a child document and routing is required.
            NOTE: if the parent Id is incorrect but save on the same shard as the correct parentId, the document will be found!</param>
            <returns>true or false</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.DocumentExistsAsync``1(System.Object,ElasticsearchCRUD.ContextAddDeleteUpdate.RoutingDefinition)">
            <summary>
            Async Checks if a document exists with a head request
            </summary>
            <typeparam name="T">Type of document to find</typeparam>
            <param name="documentId">Id of the document</param>
            <param name="routingDefinition">parent Id, required if hte docuemtnis a child document and routing is required.
            NOTE: if the parent Id is incorrect but save on the same shard as the correct parentId, the document will be found!</param>
            <returns>true or false</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.Exists(System.Uri)">
            <summary>
            Send a HEAD request to Eleasticseach to find out if the item defined in the URL exists
            </summary>
            <param name="uri">Full URI of Elasticseach plus item</param>
            <returns>true if it exists false for 404</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.ExistsAsync(System.Uri)">
            <summary>
            Async Send a HEAD request to Eleasticseach to find out if the item defined in the URL exists
            </summary>
            <param name="uri">Full URI of Elasticseach plus item</param>
            <returns>true if it exists false for 404</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.IndexExists``1">
            <summary>
            async Checks if a index exists for the type T
            </summary>
            <typeparam name="T">Type used for the index exists HEAD request. Gets the index using the mapping</typeparam>
            <returns>true if it exists false for 404</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.IndexExistsAsync``1">
            <summary>
            async Checks if a index exists for the type T
            </summary>
            <typeparam name="T">Type used for the index exists HEAD request. Gets the index using the mapping</typeparam>
            <returns>true if it exists false for 404</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.IndexTypeExists``1">
            <summary>
            Checks if a type exists for an index for the type T
            </summary>
            <typeparam name="T">Type used for the index + plus exists HEAD request. Gets the index using the mapping</typeparam>
            <returns>true if it exists false for 404</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.IndexTypeExistsAsync``1">
            <summary>
            Checks if a type exists for an index for the type T
            </summary>
            <typeparam name="T">Type used for the index + plus exists HEAD request. Gets the index using the mapping</typeparam>
            <returns>true if it exists false for 404</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasExistsForIndex``1(System.String)">
            <summary>
            Checks if an alias exists for an index for the type T
            </summary>
            <typeparam name="T">Type used for the index + plus exists HEAD request. Gets the index using the mapping</typeparam>
            <returns>true if the alias exists false for 404</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasExistsForIndexAsync``1(System.String)">
            <summary>
            async Checks if an alias exists for an index for the type T
            </summary>
            <typeparam name="T">Type used for the index + plus exists HEAD request. Gets the index using the mapping</typeparam>
            <returns>true if the alias exists false for 404</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasExists(System.String)">
            <summary>
            Checks if an alias exists
            </summary>
            <returns>true if the alias exists false for 404</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasExistsAsync(System.String)">
            <summary>
            async Checks if an alias exists
            </summary>
            <returns>true if the alias exists false for 404</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.ClearCacheForIndex``1">
            <summary>
            Clears the cache for the index. The index is defined using the Type
            </summary>
            <typeparam name="T">Type used to get the index name</typeparam>
            <returns>returns true if cache has been cleared</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.ClearCacheForIndexAsync``1">
            <summary>
            Async Clears the cache for the index. The index is defined using the Type
            </summary>
            <typeparam name="T">Type used to get the index name</typeparam>
            <returns>returns true if cache has been cleared</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasCreateForIndex(System.String,System.String)">
            <summary>
            Creates a new alias for the index parameter. 
            </summary>
            <param name="alias">name of the alias</param>
            <param name="index">index for the alias</param>
            <returns>true if the alias was created </returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasCreateForIndexAsync(System.String,System.String)">
            <summary>
            Async Creates a new alias for the index parameter. 
            </summary>
            <param name="alias">name of the alias</param>
            <param name="index">index for the alias</param>
            <returns>true if the alias was created </returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.Alias(System.String)">
            <summary>
            Creates any alias command depending on the json content
            </summary>
            <param name="jsonContent">content for the _aliases, see Elasticsearch documnetation</param>
            <returns>returns true if the alias commnad was completed successfully</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasAsync(System.String)">
            <summary>
            Async Creates any alias command depending on the json content
            </summary>
            <param name="jsonContent">content for the _aliases, see Elasticsearch documnetation</param>
            <returns>returns true if the alias commnad was completed successfully</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasRemoveForIndex(System.String,System.String)">
            <summary>
            Removes a new alias for the index parameter. 
            </summary>
            <param name="alias">name of the alias</param>
            <param name="index">index for the alias</param>
            <returns>true if the alias was removed </returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasRemoveForIndexAsync(System.String,System.String)">
            <summary>
            asnyc Removes a new alias for the index parameter. 
            </summary>
            <param name="alias">name of the alias</param>
            <param name="index">index for the alias</param>
            <returns>true if the alias was removed </returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasReplaceIndex(System.String,System.String,System.String)">
            <summary>
            Replaces the index for the alias. This can be used when reindexing live
            </summary>
            <param name="alias">Name of the alias</param>
            <param name="indexOld">Old index which will be removed</param>
            <param name="indexNew">New index which will be mapped to the alias</param>
            <returns>Returns true if the index was replaced</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.AliasReplaceIndexAsync(System.String,System.String,System.String)">
            <summary>
            Async Replaces the index for the alias. This can be used when reindexing live
            </summary>
            <param name="alias">Name of the alias</param>
            <param name="indexOld">Old index which will be removed</param>
            <param name="indexNew">New index which will be mapped to the alias</param>
            <returns>Returns true if the index was replaced</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.DeleteIndexAsync``1">
            <summary>
            Delete the whole index if it exists and Elasticsearch allows delete index.
            Property AllowDeleteForIndex must also be set to true.
            </summary>
            <typeparam name="T">Type used to get the index to delete.</typeparam>
            <returns>Result details in a task</returns>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchContext.Dispose">
            <summary>
            Dispose used to clean the HttpClient
            </summary>
        </member>
        <member name="P:ElasticsearchCRUD.ElasticsearchContext.AllowDeleteForIndex">
            <summary>
            This bool needs to be set to true if you want to delete an index. Per default this is false.
            </summary>
        </member>
        <member name="T:ElasticsearchCRUD.ElasticsearchMappingResolver">
            <summary>
            This class is used to add all register all the type definitions and then resolver them when requesting or handling response data from Elasticsearch.
            If no mapping is defined, the default mapping is used.
            </summary>
        </member>
        <member name="M:ElasticsearchCRUD.ElasticsearchMappingResolver.AddElasticSearchMappingForEntityType(System.Type,ElasticsearchCRUD.ElasticsearchMapping)">
            <summary>
            You can add custom Type handlers here for specific mapping.
            Only one mapping can be defined pro type.
            </summary>
            <param name="type">Type of class</param>
            <param name="mapping">mapping definition.</param>
        </member>
    </members>
</doc>
